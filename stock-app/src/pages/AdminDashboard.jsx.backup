import { useState, useEffect } from 'react'
import { collection, onSnapshot, orderBy, query } from 'firebase/firestore'
import { db } from '../firebase'
import { useAuth } from '../contexts/AuthContext'
import { addDefaultPasswordToExistingUsers, createMissingFirebaseAuthAccounts } from '../utils/fixExistingUsers'
import CreateShopModal from '../components/CreateShopModal'
import CreateUserModal from '../components/CreateUserModal'
import EditShopModal from '../components/EditShopModal'
import EditUserModal from '../components/EditUserModal'
import CreateCategoryModal from '../components/CreateCategoryModal'
import EditCategoryModal from '../components/EditCategoryModal'
import CreateDepotModal from '../components/CreateDepotModal'
import DeleteConfirmModal from '../components/DeleteConfirmModal'
import Sidebar from '../components/Sidebar'

export default function AdminDashboard() {
  const [shops, setShops] = useState([])
  const [users, setUsers] = useState([])
  const [categories, setCategories] = useState([])
  const [depots, setDepots] = useState([])
  const [transfers, setTransfers] = useState([])
  const [showCreateShop, setShowCreateShop] = useState(false)
  const [showCreateUser, setShowCreateUser] = useState(false)
  const [showCreateCategory, setShowCreateCategory] = useState(false)
  const [showCreateDepot, setShowCreateDepot] = useState(false)
  const [showEditShop, setShowEditShop] = useState(false)
  const [showEditUser, setShowEditUser] = useState(false)
  const [showEditCategory, setShowEditCategory] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [editingShop, setEditingShop] = useState(null)
  const [editingUser, setEditingUser] = useState(null)
  const [editingCategory, setEditingCategory] = useState(null)
  const [deletingItem, setDeletingItem] = useState(null)
  const [deleteLoading, setDeleteLoading] = useState(false)
  const [currentPage, setCurrentPage] = useState('dashboard')
  const [toolsLoading, setToolsLoading] = useState(false)
  const { logout } = useAuth()

  useEffect(() => {
    const unsubscribeShops = onSnapshot(
      query(collection(db, 'shops'), orderBy('name')),
      (snapshot) => {
        setShops(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })))
      }
    )

    const unsubscribeUsers = onSnapshot(
      query(collection(db, 'users'), orderBy('email')),
      (snapshot) => {
        setUsers(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })))
      }
    )

    const unsubscribeCategories = onSnapshot(
      collection(db, 'categories'),
      (snapshot) => {
        const cats = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))
        cats.sort((a, b) => (a.order || 0) - (b.order || 0))
        setCategories(cats)
      }
    )

    const unsubscribeDepots = onSnapshot(
      query(collection(db, 'depots'), orderBy('name')),
      (snapshot) => {
        setDepots(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })))
      }
    )

    const unsubscribeTransfers = onSnapshot(
      query(collection(db, 'transfers'), orderBy('transferredAt', 'desc')),
      (snapshot) => {
        setTransfers(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })))
      }
    )

    return () => {
      unsubscribeShops()
      unsubscribeUsers()
      unsubscribeCategories()
      unsubscribeDepots()
      unsubscribeTransfers()
    }
  }, [])

  const handlePageChange = (page) => {
    setCurrentPage(page)
  }

  // Shop CRUD operations
  const handleEditShop = (shop) => {
    setEditingShop(shop)
    setShowEditShop(true)
  }

  const handleDeleteShop = (shop) => {
    setDeletingItem({ type: 'shop', item: shop })
    setShowDeleteModal(true)
  }

  // User CRUD operations
  const handleEditUser = (user) => {
    setEditingUser(user)
    setShowEditUser(true)
  }

  const handleDeleteUser = (user) => {
    setDeletingItem({ type: 'user', item: user })
    setShowDeleteModal(true)
  }

  // Category CRUD operations
  const handleEditCategory = (category) => {
    setEditingCategory(category)
    setShowEditCategory(true)
  }

  const handleDeleteCategory = (category) => {
    setDeletingItem({ type: 'category', item: category })
    setShowDeleteModal(true)
  }

  // Tools functions
  const handleFixExistingUsers = async () => {
    setToolsLoading(true)
    try {
      const result = await addDefaultPasswordToExistingUsers()
      if (result.success) {
        alert(`${result.updated} utilisateurs mis à jour avec succès`)
      } else {
        alert(`Erreur: ${result.error?.message || 'Erreur inconnue'}`)
      }
    } catch (error) {
      alert(`Erreur: ${error.message}`)
    }
    setToolsLoading(false)
  }

  const handleCheckMissingAuth = async () => {
    setToolsLoading(true)
    try {
      const result = await createMissingFirebaseAuthAccounts()
      if (result.success) {
        const missing = result.results.filter(r => r.status === 'auth_missing')
        const ok = result.results.filter(r => r.status === 'ok')

        let message = `Vérification terminée:\n`
        message += `- ${ok.length} comptes OK\n`
        message += `- ${missing.length} comptes Firebase Auth manquants\n\n`

        if (missing.length > 0) {
          message += `Comptes manquants (se connecteront automatiquement):\n`
          missing.forEach(user => {
            message += `- ${user.email} (mot de passe: ${user.password})\n`
          })
        }

        alert(message)
      } else {
        alert(`Erreur: ${result.error?.message || 'Erreur inconnue'}`)
      }
    } catch (error) {
      alert(`Erreur: ${error.message}`)
    }
    setToolsLoading(false)
  }

  // Generic delete handler
  const confirmDelete = async () => {
    if (!deletingItem) return

    setDeleteLoading(true)
    try {
      const { deleteDoc, doc } = await import('firebase/firestore')
      const collectionName = deletingItem.type === 'shop' ? 'shops' : deletingItem.type === 'user' ? 'users' : deletingItem.type === 'depot' ? 'depots' : 'categories'
      await deleteDoc(doc(db, collectionName, deletingItem.item.id))
      setShowDeleteModal(false)
      setDeletingItem(null)
    } catch (error) {
      console.error('Erreur lors de la suppression:', error)
    }
    setDeleteLoading(false)
  }

  const closeModals = () => {
    setShowEditShop(false)
    setShowEditUser(false)
    setShowEditCategory(false)
    setShowDeleteModal(false)
    setEditingShop(null)
    setEditingUser(null)
    setEditingCategory(null)
    setDeletingItem(null)
  }

  const renderContent = () => {
    switch (currentPage) {
      case 'dashboard':
        return renderDashboardContent()
      case 'users':
        return renderUsersContent()
      case 'shops':
        return renderShopsContent()
      case 'categories':
        return renderCategoriesContent()
      case 'depots':
        return renderDepotsContent()
      case 'transfers':
        return renderTransfersContent()
      case 'stats':
        return renderStatsContent()
      case 'reports':
        return renderReportsContent()
      case 'documents':
        return renderDocumentsContent()
      case 'tools':
        return renderToolsContent()
      default:
        return renderDashboardContent()
    }
  }

  const renderDashboardContent = () => {
    const totalShops = shops.length
    const totalDepots = depots.length
    const totalUsers = users.length
    const totalCategories = categories.length
    const totalTransfers = transfers.length

    // Calculer les dukanis et dépôts
    const dukanis = shops.filter(shop => shop.type !== 'depot')
    const totalDukanis = dukanis.length

    // Transferts récents (derniers 7 jours)
    const sevenDaysAgo = new Date()
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)
    const recentTransfers = transfers.filter(transfer => {
      const transferDate = transfer.transferredAt?.toDate?.()
      return transferDate && transferDate >= sevenDaysAgo
    }).length

    return (
      <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">Tableau de Bord - Statistiques du Système</h2>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8">
          {/* Dépôts */}
          <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-blue-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-blue-900 truncate">{totalDepots}</p>
                <p className="text-xs lg:text-sm text-blue-700">Dépôts</p>
              </div>
            </div>
          </div>

          {/* Dukanis */}
          <div className="bg-gradient-to-r from-green-50 to-green-100 border border-green-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-green-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-green-900 truncate">{totalDukanis}</p>
                <p className="text-xs lg:text-sm text-green-700">Dukanis (Boutiques)</p>
              </div>
            </div>
          </div>

          {/* Utilisateurs */}
          <div className="bg-gradient-to-r from-purple-50 to-purple-100 border border-purple-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-purple-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-purple-900 truncate">{totalUsers}</p>
                <p className="text-xs lg:text-sm text-purple-700">Utilisateurs</p>
              </div>
            </div>
          </div>

          {/* Catégories */}
          <div className="bg-gradient-to-r from-orange-50 to-orange-100 border border-orange-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-orange-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-orange-900 truncate">{totalCategories}</p>
                <p className="text-xs lg:text-sm text-orange-700">Catégories</p>
              </div>
            </div>
          </div>
        </div>

        {/* Statistiques de transferts */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-gradient-to-r from-teal-50 to-teal-100 border border-teal-200 p-6 rounded-xl">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-teal-900">Transferts Total</h3>
              <svg className="w-8 h-8 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
              </svg>
            </div>
            <p className="text-3xl font-bold text-teal-900 mb-2">{totalTransfers}</p>
            <p className="text-sm text-teal-700">Transferts effectués au total</p>
          </div>

          <div className="bg-gradient-to-r from-cyan-50 to-cyan-100 border border-cyan-200 p-6 rounded-xl">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-cyan-900">Transferts Récents</h3>
              <svg className="w-8 h-8 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <p className="text-3xl font-bold text-cyan-900 mb-2">{recentTransfers}</p>
            <p className="text-sm text-cyan-700">Transferts des 7 derniers jours</p>
          </div>
        </div>

        {/* Activité récente */}
        {transfers.length > 0 && (
          <div className="mt-8">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Derniers Transferts</h3>
            <div className="space-y-3">
              {transfers.slice(0, 5).map(transfer => {
                const transferDate = transfer.transferredAt?.toDate?.()
                const isPersonalConsumption = transfer.type === 'personal_consumption'
                return (
                  <div key={transfer.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className={`w-2 h-2 rounded-full ${isPersonalConsumption ? 'bg-orange-500' : 'bg-blue-500'}`}></div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{transfer.itemName}</p>
                        <p className="text-xs text-gray-500">
                          {transfer.fromLocationName} → {transfer.toLocationName}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium text-gray-900">{transfer.quantity} unités</p>
                      <p className="text-xs text-gray-500">
                        {transferDate?.toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        )}
      </div>
  )

  const renderUsersContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Gestion des Utilisateurs</h2>
        <button
          onClick={() => setShowCreateUser(true)}
          className="bg-gradient-to-r from-teal-600 to-teal-700 text-white px-4 py-2 rounded-lg hover:from-teal-700 hover:to-teal-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
        >
          <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          Créer Utilisateur
        </button>
      </div>
      <div className="space-y-4">
        {users.length === 0 ? (
          <div className="text-center py-8">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
            </svg>
            <p className="mt-2 text-sm text-gray-500">Aucun utilisateur créé</p>
          </div>
        ) : (
          users.map(user => {
            const userShop = shops.find(shop => shop.id === user.shopId)
            return (
              <div key={user.id} className="bg-gradient-to-r from-teal-50 to-cyan-50 border border-teal-200 p-4 rounded-xl hover:shadow-md transition-all duration-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center flex-1">
                    <div className={`w-3 h-3 rounded-full mr-3 ${user.role === 'admin' ? 'bg-purple-500' : 'bg-teal-500'}`}></div>
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">
                        {user.prenom ? `${user.prenom} ${user.nom || ''}`.trim() : user.email}
                      </h4>
                      {user.prenom && (
                        <p className="text-xs text-gray-500">{user.email}</p>
                      )}
                      <p className="text-sm text-teal-700">
                        {user.role === 'admin' ? 'Administrateur' : 'Utilisateur Magasin'}
                        {userShop && ` • ${userShop.name}`}
                      </p>
                    </div>
                  </div>
                  <div className="flex space-x-2 ml-4">
                    <button
                      onClick={() => handleEditUser(user)}
                      className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                      title="Modifier"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                    </button>
                    <button
                      onClick={() => handleDeleteUser(user)}
                      className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors duration-200"
                      title="Supprimer"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            )
          })
        )}
      </div>
    </div>
  )

  const renderShopsContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Gestion des Magasins</h2>
        <button
          onClick={() => setShowCreateShop(true)}
          className="bg-gradient-to-r from-green-600 to-green-700 text-white px-4 py-2 rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
        >
          <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          Créer Magasin
        </button>
      </div>
      <div className="space-y-4">
        {shops.length === 0 ? (
          <div className="text-center py-8">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
            <p className="mt-2 text-sm text-gray-500">Aucun magasin créé</p>
          </div>
        ) : (
          shops.map(shop => (
            <div key={shop.id} className="bg-gradient-to-r from-green-50 to-green-100 border border-green-200 p-4 rounded-xl hover:shadow-md transition-all duration-200">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 flex items-center">
                    <svg className="w-4 h-4 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                    </svg>
                    {shop.name}
                  </h4>
                  <p className="text-sm text-green-700 mt-1">
                    {shop.location}
                  </p>
                  <p className="text-xs text-green-600 mt-1">
                    Créé le: {shop.created_at?.toDate?.()?.toLocaleDateString() || 'N/A'}
                  </p>
                </div>
                <div className="flex space-x-2 ml-4">
                  <button
                    onClick={() => handleEditShop(shop)}
                    className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                    title="Modifier"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => handleDeleteShop(shop)}
                    className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors duration-200"
                    title="Supprimer"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )

  const renderCategoriesContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Gestion des Catégories</h2>
        <button
          onClick={() => setShowCreateCategory(true)}
          className="bg-gradient-to-r from-purple-600 to-purple-700 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-purple-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
        >
          <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
          Créer Catégorie
        </button>
      </div>
      <div className="space-y-4">
        {categories.length === 0 ? (
          <div className="text-center py-8">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            <p className="mt-2 text-sm text-gray-500">Aucune catégorie créée</p>
          </div>
        ) : (
          categories.map(category => (
            <div key={category.id} className="bg-gradient-to-r from-purple-50 to-purple-100 border border-purple-200 p-4 rounded-xl hover:shadow-md transition-all duration-200">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 flex items-center">
                    <svg className="w-4 h-4 text-purple-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                    {category.name}
                  </h4>
                  <p className="text-sm text-purple-700 mt-1">
                    {category.description || 'Aucune description'}
                  </p>
                  <div className="flex items-center mt-2 space-x-4">
                    <p className="text-xs text-purple-600">
                      Ordre: {category.order}
                    </p>
                    <p className="text-xs text-purple-600">
                      Créé le: {category.created_at?.toDate?.()?.toLocaleDateString() || 'N/A'}
                    </p>
                  </div>
                </div>
                <div className="flex space-x-2 ml-4">
                  <button
                    onClick={() => handleEditCategory(category)}
                    className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                    title="Modifier"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => handleDeleteCategory(category)}
                    className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors duration-200"
                    title="Supprimer"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )

  const renderDepotsContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Gestion des Dépôts</h2>
        <button
          onClick={() => setShowCreateDepot(true)}
          className="bg-gradient-to-r from-blue-600 to-blue-700 text-white px-4 py-2 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
        >
          <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
          </svg>
          Créer Dépôt
        </button>
      </div>
      <div className="space-y-4">
        {depots.length === 0 ? (
          <div className="text-center py-8">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
            </svg>
            <p className="mt-2 text-sm text-gray-500">Aucun dépôt créé</p>
          </div>
        ) : (
          depots.map(depot => (
            <div key={depot.id} className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 p-4 rounded-xl hover:shadow-md transition-all duration-200">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 flex items-center">
                    <svg className="w-4 h-4 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
                    </svg>
                    {depot.name}
                  </h4>
                  <p className="text-sm text-blue-700 mt-1">
                    📍 {depot.location}
                  </p>
                  {depot.description && (
                    <p className="text-sm text-blue-600 mt-1">
                      {depot.description}
                    </p>
                  )}
                  <div className="flex items-center mt-2 space-x-4">
                    {depot.manager && (
                      <p className="text-xs text-blue-600">
                        Responsable: {depot.manager}
                      </p>
                    )}
                    <p className="text-xs text-blue-600">
                      Créé le: {depot.created_at?.toDate?.()?.toLocaleDateString() || 'N/A'}
                    </p>
                  </div>
                </div>
                <div className="flex space-x-2 ml-4">
                  <button
                    className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                    title="Voir inventaire"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                    </svg>
                  </button>
                  <button
                    className="p-2 text-green-600 hover:bg-green-100 rounded-lg transition-colors duration-200"
                    title="Éditer"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button
                    onClick={() => {
                      setDeletingItem({ type: 'depot', item: depot })
                      setShowDeleteModal(true)
                    }}
                    className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors duration-200"
                    title="Supprimer"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  )

  const renderStatsContent = () => {
    const totalShops = shops.length
    const totalDepots = depots.length
    const totalUsers = users.length
    const totalCategories = categories.length
    const totalTransfers = transfers.length

    // Calculer les dukanis et dépôts
    const dukanis = shops.filter(shop => shop.type !== 'depot')
    const totalDukanis = dukanis.length

    // Transferts récents (derniers 7 jours)
    const sevenDaysAgo = new Date()
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7)
    const recentTransfers = transfers.filter(transfer => {
      const transferDate = transfer.transferredAt?.toDate?.()
      return transferDate && transferDate >= sevenDaysAgo
    }).length

    return (
      <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
        <h2 className="text-2xl font-bold text-gray-900 mb-6">Statistiques du Système</h2>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-8">
          {/* Dépôts */}
          <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-blue-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-blue-900 truncate">{totalDepots}</p>
                <p className="text-xs lg:text-sm text-blue-700">Dépôts</p>
              </div>
            </div>
          </div>

          {/* Dukanis */}
          <div className="bg-gradient-to-r from-green-50 to-green-100 border border-green-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-green-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-green-900 truncate">{totalDukanis}</p>
                <p className="text-xs lg:text-sm text-green-700">Dukanis (Boutiques)</p>
              </div>
            </div>
          </div>

          {/* Utilisateurs */}
          <div className="bg-gradient-to-r from-purple-50 to-purple-100 border border-purple-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-purple-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-purple-900 truncate">{totalUsers}</p>
                <p className="text-xs lg:text-sm text-purple-700">Utilisateurs</p>
              </div>
            </div>
          </div>

          {/* Catégories */}
          <div className="bg-gradient-to-r from-orange-50 to-orange-100 border border-orange-200 p-4 lg:p-6 rounded-xl h-24 lg:h-auto">
            <div className="flex items-center h-full">
              <div className="flex items-center justify-center w-10 h-10 lg:w-12 lg:h-12 bg-orange-600 rounded-xl mr-3 lg:mr-4 flex-shrink-0">
                <svg className="w-5 h-5 lg:w-6 lg:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                </svg>
              </div>
              <div className="min-w-0 flex-1">
                <p className="text-xl lg:text-2xl font-bold text-orange-900 truncate">{totalCategories}</p>
                <p className="text-xs lg:text-sm text-orange-700">Catégories</p>
              </div>
            </div>
          </div>
        </div>

        {/* Statistiques de transferts */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-gradient-to-r from-teal-50 to-teal-100 border border-teal-200 p-6 rounded-xl">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-teal-900">Transferts Total</h3>
              <svg className="w-8 h-8 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
              </svg>
            </div>
            <p className="text-3xl font-bold text-teal-900 mb-2">{totalTransfers}</p>
            <p className="text-sm text-teal-700">Transferts effectués au total</p>
          </div>

          <div className="bg-gradient-to-r from-cyan-50 to-cyan-100 border border-cyan-200 p-6 rounded-xl">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-cyan-900">Transferts Récents</h3>
              <svg className="w-8 h-8 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <p className="text-3xl font-bold text-cyan-900 mb-2">{recentTransfers}</p>
            <p className="text-sm text-cyan-700">Transferts des 7 derniers jours</p>
          </div>
        </div>

        {/* Activité récente */}
        {transfers.length > 0 && (
          <div className="mt-8">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Derniers Transferts</h3>
            <div className="space-y-3">
              {transfers.slice(0, 5).map(transfer => {
                const transferDate = transfer.transferredAt?.toDate?.()
                const isPersonalConsumption = transfer.type === 'personal_consumption'

                return (
                  <div key={transfer.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <div className={`w-2 h-2 rounded-full ${isPersonalConsumption ? 'bg-orange-500' : 'bg-blue-500'}`}></div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{transfer.itemName}</p>
                        <p className="text-xs text-gray-500">
                          {transfer.fromLocationName} → {transfer.toLocationName}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium text-gray-900">{transfer.quantity} unités</p>
                      <p className="text-xs text-gray-500">
                        {transferDate?.toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderReportsContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Rapports Admin</h2>
      <div className="text-center py-12">
        <svg className="mx-auto h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Rapports administrateur</h3>
        <p className="text-gray-600">Analyses et statistiques globales.</p>
      </div>
    </div>
  )

  const renderDocumentsContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Documents Admin</h2>
      <div className="text-center py-12">
        <svg className="mx-auto h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">Documents administratifs</h3>
        <p className="text-gray-600">Gestion documentaire centralisée.</p>
      </div>
    </div>
  )

  const renderTransfersContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">Historique des Transferts</h2>
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
          </svg>
          <span>{transfers.length} transferts au total</span>
        </div>
      </div>

      <div className="space-y-4">
        {transfers.length === 0 ? (
          <div className="text-center py-8">
            <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
            </svg>
            <p className="mt-2 text-sm text-gray-500">Aucun transfert effectué</p>
          </div>
        ) : (
          transfers.map(transfer => {
            const isPersonalConsumption = transfer.type === 'personal_consumption'
            const transferDate = transfer.transferredAt?.toDate?.() || new Date()

            return (
              <div key={transfer.id} className={`border p-4 rounded-xl hover:shadow-md transition-all duration-200 ${
                isPersonalConsumption
                  ? 'bg-gradient-to-r from-orange-50 to-orange-100 border-orange-200'
                  : 'bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200'
              }`}>
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
                        isPersonalConsumption ? 'bg-orange-600' : 'bg-blue-600'
                      }`}>
                        {isPersonalConsumption ? (
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                        ) : (
                          <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                          </svg>
                        )}
                      </div>
                      <div>
                        <h4 className="font-semibold text-gray-900">{transfer.itemName}</h4>
                        <p className={`text-sm ${isPersonalConsumption ? 'text-orange-700' : 'text-blue-700'}`}>
                          {isPersonalConsumption ? 'Consommation personnelle' : 'Transfert d\'article'}
                        </p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <p className="text-gray-600">De:</p>
                        <p className="font-medium text-gray-900">{transfer.fromLocationName}</p>
                        <p className="text-xs text-gray-500">
                          {transfer.fromLocationType === 'depot' ? 'Dépôt' : 'Magasin'}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-600">Vers:</p>
                        <p className="font-medium text-gray-900">{transfer.toLocationName}</p>
                        <p className="text-xs text-gray-500">
                          {transfer.toLocationType === 'personal'
                            ? 'Personnel'
                            : transfer.toLocationType === 'depot'
                            ? 'Dépôt'
                            : 'Magasin'
                          }
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-600">Quantité:</p>
                        <p className="font-bold text-gray-900 text-lg">{transfer.quantity}</p>
                      </div>
                    </div>

                    {transfer.comment && (
                      <div className="mt-3 p-2 bg-gray-50 rounded-lg">
                        <p className="text-sm text-gray-700">
                          <span className="font-medium">Commentaire:</span> {transfer.comment}
                        </p>
                      </div>
                    )}

                    <div className="mt-3 flex items-center justify-between text-xs text-gray-500">
                      <span>Par: {transfer.transferredBy}</span>
                      <span>{transferDate.toLocaleDateString()} à {transferDate.toLocaleTimeString()}</span>
                    </div>
                  </div>

                  <div className="ml-4">
                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                      transfer.status === 'completed'
                        ? 'text-green-600 bg-green-100'
                        : 'text-yellow-600 bg-yellow-100'
                    }`}>
                      {transfer.status === 'completed' ? 'Terminé' : 'En cours'}
                    </span>
                  </div>
                </div>
              </div>
            )
          })
        )}
      </div>
    </div>
  )

  const renderToolsContent = () => (
    <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-lg p-8 border border-teal-100">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Outils d'Administration</h2>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Gestion des Utilisateurs */}
        <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 p-6 rounded-xl">
          <div className="flex items-center mb-4">
            <div className="flex items-center justify-center w-10 h-10 bg-blue-600 rounded-lg mr-3">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900">Gestion des Comptes</h3>
          </div>

          <p className="text-sm text-blue-700 mb-4">
            Outils pour synchroniser les comptes utilisateurs entre Firestore et Firebase Auth.
          </p>

          <div className="space-y-3">
            <button
              onClick={handleFixExistingUsers}
              disabled={toolsLoading}
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 text-sm font-medium"
            >
              {toolsLoading ? 'Traitement...' : 'Ajouter mots de passe par défaut'}
            </button>

            <button
              onClick={handleCheckMissingAuth}
              disabled={toolsLoading}
              className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 text-sm font-medium"
            >
              {toolsLoading ? 'Vérification...' : 'Vérifier comptes Firebase Auth'}
            </button>
          </div>

          <div className="mt-4 p-3 bg-blue-50 rounded-lg">
            <p className="text-xs text-blue-600">
              <strong>Auto-connexion:</strong> Les utilisateurs manquant un compte Firebase Auth seront automatiquement créés lors de leur première connexion avec leur mot de passe par défaut.
            </p>
          </div>
        </div>

        {/* Informations */}
        <div className="bg-gradient-to-r from-green-50 to-green-100 border border-green-200 p-6 rounded-xl">
          <div className="flex items-center mb-4">
            <div className="flex items-center justify-center w-10 h-10 bg-green-600 rounded-lg mr-3">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900">Comment ça marche</h3>
          </div>

          <div className="text-sm text-green-700 space-y-2">
            <p><strong>1. Création d'utilisateur:</strong></p>
            <p className="ml-4">• Le mot de passe est stocké comme defaultPassword dans Firestore</p>
            <p className="ml-4">• Le compte Firebase Auth est créé immédiatement</p>

            <p className="pt-2"><strong>2. Connexion automatique:</strong></p>
            <p className="ml-4">• Si le compte Firebase Auth manque, il est créé automatiquement</p>
            <p className="ml-4">• Utilise le defaultPassword stocké dans Firestore</p>

            <p className="pt-2"><strong>3. Mots de passe par défaut:</strong></p>
            <p className="ml-4">• Nouveaux utilisateurs: mot de passe choisi à la création</p>
            <p className="ml-4">• Utilisateurs existants: "123456" par défaut</p>
          </div>
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gradient-to-br from-teal-50 via-cyan-50 to-green-50">
      {/* Sidebar */}
      <Sidebar currentPage={currentPage} onPageChange={handlePageChange} />
      {/* Main Content Area */}
      <div className="ml-64">
        {/* Header */}
        <header className="bg-white/80 backdrop-blur-sm shadow-sm border-b border-teal-100">
          <div className="px-6 py-4">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  {currentPage === 'dashboard' && 'Tableau de Bord Admin'}
                  {currentPage === 'users' && 'Gestion Utilisateurs'}
                  {currentPage === 'shops' && 'Gestion Magasins'}
                  {currentPage === 'categories' && 'Gestion Catégories'}
                  {currentPage === 'depots' && 'Gestion Dépôts'}
                  {currentPage === 'transfers' && 'Transferts d\'Articles'}
                  {currentPage === 'stats' && 'Statistiques du Système'}
                  {currentPage === 'reports' && 'Rapports Admin'}
                  {currentPage === 'documents' && 'Documents Admin'}
                </h1>
                <p className="text-sm text-gray-600 mt-1">
                  Administration DukaPilote
                </p>
              </div>

              {/* Action Buttons */}
              <div className="flex items-center space-x-3">
                {(currentPage === 'dashboard' || currentPage === 'shops') && (
                  <button
                    onClick={() => setShowCreateShop(true)}
                    className="bg-gradient-to-r from-green-600 to-green-700 text-white px-4 py-2 rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
                  >
                    <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                    Créer Magasin
                  </button>
                )}
                {(currentPage === 'dashboard' || currentPage === 'users') && (
                  <button
                    onClick={() => setShowCreateUser(true)}
                    className="bg-gradient-to-r from-teal-600 to-teal-700 text-white px-4 py-2 rounded-lg hover:from-teal-700 hover:to-teal-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
                  >
                    <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    Créer Utilisateur
                  </button>
                )}
                {(currentPage === 'categories') && (
                  <button
                    onClick={() => setShowCreateCategory(true)}
                    className="bg-gradient-to-r from-purple-600 to-purple-700 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-purple-800 transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 font-medium"
                  >
                    <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                    Créer Catégorie
                  </button>
                )}
                <button
                  onClick={logout}
                  className="bg-white text-gray-600 border border-gray-300 px-4 py-2 rounded-lg hover:bg-gray-50 transition-all duration-200 shadow-sm hover:shadow-md font-medium"
                >
                  <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                  </svg>
                  Déconnexion
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="p-6">
          {renderContent()}
        </main>
      </div>

      {showCreateShop && (
        <CreateShopModal onClose={() => setShowCreateShop(false)} />
      )}

      {showCreateUser && (
        <CreateUserModal
          onClose={() => setShowCreateUser(false)}
          shops={shops}
        />
      )}

      {showEditShop && (
        <EditShopModal
          onClose={closeModals}
          shop={editingShop}
        />
      )}

      {showEditUser && (
        <EditUserModal
          onClose={closeModals}
          user={editingUser}
          shops={shops}
        />
      )}

      {showCreateCategory && (
        <CreateCategoryModal onClose={() => setShowCreateCategory(false)} />
      )}

      {showCreateDepot && (
        <CreateDepotModal onClose={() => setShowCreateDepot(false)} />
      )}

      {showEditCategory && (
        <EditCategoryModal
          onClose={closeModals}
          category={editingCategory}
        />
      )}

      {showDeleteModal && deletingItem && (
        <DeleteConfirmModal
          onClose={closeModals}
          onConfirm={confirmDelete}
          title={deletingItem.type === 'shop' ? 'Supprimer le Magasin' : deletingItem.type === 'user' ? 'Supprimer l\'Utilisateur' : deletingItem.type === 'depot' ? 'Supprimer le Dépôt' : 'Supprimer la Catégorie'}
          message={deletingItem.type === 'shop'
            ? 'Êtes-vous sûr de vouloir supprimer définitivement le magasin'
            : deletingItem.type === 'user'
            ? 'Êtes-vous sûr de vouloir supprimer définitivement l\'utilisateur'
            : deletingItem.type === 'depot'
            ? 'Êtes-vous sûr de vouloir supprimer définitivement le dépôt'
            : 'Êtes-vous sûr de vouloir supprimer définitivement la catégorie'
          }
          itemName={deletingItem.type === 'shop'
            ? deletingItem.item.name
            : deletingItem.type === 'user'
            ? (deletingItem.item.prenom ? `${deletingItem.item.prenom} ${deletingItem.item.nom || ''}`.trim() : deletingItem.item.email)
            : deletingItem.item.name
          }
          loading={deleteLoading}
        />
      )}
    </div>
  )
}