rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user belongs to the same shop
    function isSameShop(shopId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.shopId == shopId;
    }

    // Helper function to check if user can access a shop/depot (including linked depots)
    function canAccessShopOrDepot() {
      return isAuthenticated();
    }

    // Users collection - Critical security
    match /users/{userId} {
      // Users can read their own profile, admins can read all users
      allow read: if isOwner(userId) || isAdmin();

      // Only admins can create/update/delete users
      allow create, update, delete: if isAdmin();
    }

    // Shops collection
    match /shops/{shopId} {
      // Shop users can read shops, admins can read all
      allow read: if isAdmin() || canAccessShopOrDepot();

      // Only admins can create/update/delete shops
      allow create, update, delete: if isAdmin();
    }

    // Categories collection - User-specific categories
    match /categories/{categoryId} {
      // Users can read their own categories, admins can read all
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());

      // Users can create/update/delete their own categories
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Depots collection
    match /depots/{depotId} {
      // Users can read depots, admins can read all
      allow read: if isAdmin() || canAccessShopOrDepot();

      // Only admins can create/update/delete depots
      allow create, update, delete: if isAdmin();
    }

    // Items collection
    match /items/{itemId} {
      // Users can access items, admins can access all
      allow read, write: if isAdmin() || canAccessShopOrDepot();

      // Only allow creation if user is authenticated or is admin
      allow create: if isAdmin() || canAccessShopOrDepot();
    }

    // Transfers collection - Simplified rules for debugging
    match /transfers/{transferId} {
      // Allow all authenticated users to read and create transfers
      allow read, create: if isAuthenticated();
      
      // Only admins can update/delete transfers
      allow update, delete: if isAdmin();
    }

    // Sales collection
    match /sales/{saleId} {
      // Allow all authenticated users to read and create sales
      allow read, create: if isAuthenticated();
      
      // Only admins can update/delete sales
      allow update, delete: if isAdmin();
    }

    // Quotes collection
    match /quotes/{quoteId} {
      // All authenticated users can read and create quotes
      allow read, create: if isAuthenticated();
      
      // Users can update/delete quotes, admins can update/delete all
      allow update, delete: if isAuthenticated();
    }

    // Invoices collection
    match /invoices/{invoiceId} {
      // All authenticated users can read and create invoices
      allow read, create: if isAuthenticated();
      
      // Users can update/delete invoices, admins can update/delete all
      allow update, delete: if isAuthenticated();
    }

    // Credits collection
    match /credits/{creditId} {
      // All authenticated users can read and create credits
      allow read, create: if isAuthenticated();
      
      // Users can update/delete credits, admins can update/delete all
      allow update, delete: if isAuthenticated();
    }

    // Audit logs (if implemented)
    match /audit_logs/{logId} {
      // Only admins can read audit logs
      allow read: if isAdmin();

      // System can write audit logs (server-side only)
      allow write: if false; // Prevent client-side writes
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}